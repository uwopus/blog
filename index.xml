<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opus Build Blog</title><link>https://uwopus.github.io/blog/</link><description>Recent content on Opus Build Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Feb 2022 22:15:51 -0500</lastBuildDate><atom:link href="https://uwopus.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototype Test 1</title><link>https://uwopus.github.io/blog/posts/prototypetest/</link><pubDate>Sun, 13 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest/</guid><description>Today we connected all the electronics, mounted them on the chassis, attached the prototype system to our testing rig and powered on. After a bit of debugging, it succesfully moved! Both motors are now able to reel the rope in and out to travel up and down the canvas at an arbitrarily set speed.
Next Steps Software: Make easier manual control mode for further testing Test controller algorithm, tune as necessary</description></item><item><title>Web App Design</title><link>https://uwopus.github.io/blog/posts/webapp/</link><pubDate>Sun, 16 Jan 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/webapp/</guid><description>The Op√ºs user-facing webapp was coded in pure HTML and CSS for desktop browser view only for now. It was coded in CodePen and each page can be viewed in the collection linked here: https://codepen.io/collection/zxBgew
Next Steps Host website on robot&amp;rsquo;s Raspberry Pi Link all pages together through communication with the robot Incorporate image processing algorithm</description></item><item><title>Raspberry Pi Zero Bringup</title><link>https://uwopus.github.io/blog/posts/zero-bringup/</link><pubDate>Tue, 11 Jan 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/zero-bringup/</guid><description>The Raspberry Pi Zero 2 is the main computer for the robot, and performs the path planning and high-level control for Opus. Although there is a previous post that outlines how to install CAN on a Pi Zero, it was determined that the CAN implementation would take much more time for insignificant returns. This post outlines how the initial setup was done on the Zero so that it is able to build programs for the Pico, program it, and development can start on the communication.</description></item><item><title>Bringing up CAN on a Pi Zero 2</title><link>https://uwopus.github.io/blog/posts/can-bringup/</link><pubDate>Fri, 17 Dec 2021 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/can-bringup/</guid><description>The Problem Most guides online to enable CAN with SocketCAN on the Raspberry Pi, it is assumed that the MCP2515 is used. This chip is extremely popular, but because of the supply chain issues stemming from COVID-19, it is also very hard to find. When we ordered the components for Opus&amp;rsquo;s main board, we were lucky enough to find some MCP 2510 chips in stock on Digikey. Since the Linux driver is called mcp251x, we assumed that it would be pretty easy to setup!</description></item></channel></rss>
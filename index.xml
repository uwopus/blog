<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opus Build Blog: Autonomous Mural Painting Robot</title><link>https://uwopus.github.io/blog/</link><description>Recent content on Opus Build Blog: Autonomous Mural Painting Robot</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Mar 2022 22:15:51 -0500</lastBuildDate><atom:link href="https://uwopus.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototype Test 3</title><link>https://uwopus.github.io/blog/posts/prototypetest3/</link><pubDate>Sun, 06 Mar 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest3/</guid><description>This week, we were able to attain a portable whiteboard thanks to Julia&amp;rsquo;s mom being a teacher. We attached the robot to the whiteboard by tying the strings to C-clamps attached at the top of the whiteboard frame. We attached a marker and tried out moving up, down, left, right and organic shapes using the Pro Controller. Our bot is able to make vertical lines successfully, but horizontal lines are more difficult (it tends to keep tilting diagonally downwards).</description></item><item><title>Prototype Test 2</title><link>https://uwopus.github.io/blog/posts/prototypetest2/</link><pubDate>Sun, 27 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest2/</guid><description>Because we are not permitted to use spraypaint in the symposium building, we had to pivot to use markers instead of paint. This will still be a viable proof of concept without the safety issues of using aerosol cans indoors. This week, we made a new testing rig with a bigger canvas and a marker, and connected a Nintendo Switch Pro Controller to be able to easily control Opüs.
Next Steps Find a portable whiteboard to be able to take to demos as a canvas</description></item><item><title>Main Board and Pico Communications Revisit</title><link>https://uwopus.github.io/blog/posts/spi2/</link><pubDate>Thu, 24 Feb 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/spi2/</guid><description>Today, we found some major issues with the way that the communications was implemented last month.
Issue Prior to these changes, the high level communications protocol was as follows:
Zero sends a command to the Pico Pico recieves commands, sends back an ACK/NACK along with any data requested This scheme was highly dependent on the states being synchronized between the Pico and the Zero. If a message was missed, both the Pico and Zero would be expecting to receive data.</description></item><item><title>Electronics Mounting</title><link>https://uwopus.github.io/blog/posts/elecmounting/</link><pubDate>Sun, 20 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/elecmounting/</guid><description>Since the electronics have been finalised and testing is about to begin the top electronic mounting plate and end effector mechanism must be designed. Starting with the electronic mounting, there needs to be mounting holes provided on the top plate and through holes that allow both the motor power cables and speed controller cables to be routed through. The layout is shown in the figure below.
Next, the servo actuated marker mechanism was designed from a top down approach to ensure it made horizontal contact with the drawing surface.</description></item><item><title>Prototype Test 1</title><link>https://uwopus.github.io/blog/posts/prototypetest/</link><pubDate>Sun, 13 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest/</guid><description>Today we connected all the electronics, mounted them on the chassis, attached the prototype system to our testing rig and powered on. After a bit of debugging, it succesfully moved! Both motors are now able to reel the rope in and out to travel up and down the canvas at an arbitrarily set speed.
Next Steps Software: Make easier manual control mode for further testing Test controller algorithm, tune as necessary Attach and test painting mechanism</description></item><item><title>Prototype Mechanical Redesign</title><link>https://uwopus.github.io/blog/posts/mech2/</link><pubDate>Sun, 06 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/mech2/</guid><description>Over the past weeks the robot has physically changed dramatically with the goal of minimising the footprint of the robot. While additional work is still required for the robot end effector the traversal system has been completely designed, reviewed, and should begin manufacturing as soon as possible.
The torque and rope tension calculations from the previous design iteration should be sufficient as the robot now weighs less. The current design has three main assemblies which are shown in more detailed views below.</description></item><item><title>Pico &lt;-> Motor Interface</title><link>https://uwopus.github.io/blog/posts/motormovement/</link><pubDate>Fri, 04 Feb 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/motormovement/</guid><description>Purpose C Code had to be written on the Raspberry Pi Pico to interface with the motor controller and interpret the ticks from the encoders.
PID Commands The Talon SRX expects PID commands with a 1.5ms neutral pulse length, varying up to 2ms for full speed forwards and down to 1ms for full speed backwards. The maximum PWM input frequency is 345Hz. This information is found in the Hardware Manual [1.</description></item><item><title>Web App Design</title><link>https://uwopus.github.io/blog/posts/webapp/</link><pubDate>Tue, 25 Jan 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/webapp/</guid><description>The Opüs user-facing webapp was coded in pure HTML and CSS for desktop browser view only for now. It was coded in CodePen and each page can be viewed in the collection linked here: https://codepen.io/collection/zxBgew
Next Steps Host website on robot&amp;rsquo;s Raspberry Pi Link all pages together through communication with the robot Incorporate image processing algorithm</description></item><item><title>Main Board and Pico Communications</title><link>https://uwopus.github.io/blog/posts/spi1/</link><pubDate>Tue, 18 Jan 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/spi1/</guid><description>This week we&amp;rsquo;ve been waiting for our Talon SRX Motor Controllers generously lended from Team 1325. While we wait for them to get here from Mississauga, we decided to get the Pico board in a position where we can plug in the motor controllers as soon as they arrive and begin turning them.
We chose SPI as the communication protocol between the Raspberry Pi Zero control computer and the Raspberry Pi Pico microcontroller because the UART port was left open as a slot for the IMU and I2C doesn&amp;rsquo;t work particularly well over longer cable runs because of the open-drain drivers.</description></item><item><title>Raspberry Pi Pico Bringup</title><link>https://uwopus.github.io/blog/posts/picobringup/</link><pubDate>Thu, 13 Jan 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/picobringup/</guid><description>Purpose The Raspberry Pi Pico is responsible for reading the encoder values from the motors while providing PWM values to the Talon SRXs. The board has two JST XH connectors to connect to the two encoders, and two three pin headers for PWM output. The board also has some status LEDs, a SPI communication port, a SWD interface for debugging and five general purpose input/outputs for future use.
The following photo is the 3D view from KiCAD of the board.</description></item><item><title>Raspberry Pi Zero Bringup</title><link>https://uwopus.github.io/blog/posts/zero-bringup/</link><pubDate>Tue, 11 Jan 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/zero-bringup/</guid><description>The Raspberry Pi Zero 2 is the main computer for the robot, and performs the path planning and high-level control for Opus. Although there is a previous post that outlines how to install CAN on a Pi Zero, it was determined that the CAN implementation would take much more time for insignificant returns. This post outlines how the initial setup was done on the Zero so that it is able to build programs for the Pico, program it, and development can start on the communication.</description></item><item><title>3D Printing First Prototype</title><link>https://uwopus.github.io/blog/posts/mech1/</link><pubDate>Sun, 09 Jan 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/mech1/</guid><description>Returning to work on the project was primarily an attempt at producing the solution developed during MTE481. The design is shown in the below figure. The difficulty of producing this prototype is its size which increases printing time and requires it to be separated into multiple pieces.
The outer shell is approximately 170mm tall and inscribed within a 308mm diameter circle. This is significantly larger in the x-y plane than the 3D printer allows (220mm x 220mm).</description></item><item><title>Bringing up CAN on a Pi Zero 2</title><link>https://uwopus.github.io/blog/posts/can-bringup/</link><pubDate>Fri, 17 Dec 2021 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/can-bringup/</guid><description>The Problem Most guides online to enable CAN with SocketCAN on the Raspberry Pi, it is assumed that the MCP2515 is used. This chip is extremely popular, but because of the supply chain issues stemming from COVID-19, it is also very hard to find. When we ordered the components for Opus&amp;rsquo;s main board, we were lucky enough to find some MCP 2510 chips in stock on Digikey. Since the Linux driver is called mcp251x, we assumed that it would be pretty easy to setup!</description></item><item><title>Main Board Initial Assembly</title><link>https://uwopus.github.io/blog/posts/main-board/</link><pubDate>Fri, 17 Dec 2021 10:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/main-board/</guid><description>The boards came! Some surface finish issues but overall look pretty good, did some basic short tests and everything checked out. They were ridiculously cheap, $8 for 10 main boards and 5 pico connection boards.
We made a few mistakes with the Digikey Order here, the fuse holders were different than the chosen footprints so they could not be populated. Also, the inductor was really hard to put on:
Since the footprint was almost completely underneath the component, the only way to solder this component is with a hot air gun.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opus Build Blog: Autonomous Mural Painting Robot</title><link>https://uwopus.github.io/blog/</link><description>Recent content on Opus Build Blog: Autonomous Mural Painting Robot</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Mar 2022 22:15:51 -0500</lastBuildDate><atom:link href="https://uwopus.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototype Test 3</title><link>https://uwopus.github.io/blog/posts/prototypetest3/</link><pubDate>Sun, 06 Mar 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest3/</guid><description>This week, we were able to attain a portable whiteboard thanks to Julia&amp;rsquo;s mom being a teacher. We attached the robot to the whiteboard by tying the strings to C-clamps attached at the top of the whiteboard frame. We attached a marker and tried out moving up, down, left, right and organic shapes using the Pro Controller. Our bot is able to make vertical lines successfully, but horizontal lines are more difficult (it tends to keep tilting diagonally downwards).</description></item><item><title>Prototype Test 2</title><link>https://uwopus.github.io/blog/posts/prototypetest2/</link><pubDate>Sun, 27 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest2/</guid><description>Because we are not permitted to use spraypaint in the symposium building, we had to pivot to use markers instead of paint. This will still be a viable proof of concept without the safety issues of using aerosol cans indoors. This week, we made a new testing rig with a bigger canvas and a marker, and connected a Nintendo Switch Pro Controller to be able to easily control Opüs.
Next Steps Find a portable whiteboard to be able to take to demos as a canvas</description></item><item><title>Main Board and Pico Communications Revisit</title><link>https://uwopus.github.io/blog/posts/spi2/</link><pubDate>Thu, 24 Feb 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/spi2/</guid><description>February 24th, 2022
Today, we found some major issues with the way that the communications was implemented last month.
Issue Prior to these changes, the high level communications protocol was as follows:
Zero sends a command to the Pico Pico recieves commands, sends back an ACK/NACK along with any data requested This scheme was highly dependent on the states being synchronized between the Pico and the Zero. If a message was missed, both the Pico and Zero would be expecting to receive data.</description></item><item><title>Prototype Test 1</title><link>https://uwopus.github.io/blog/posts/prototypetest/</link><pubDate>Sun, 13 Feb 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/prototypetest/</guid><description>Today we connected all the electronics, mounted them on the chassis, attached the prototype system to our testing rig and powered on. After a bit of debugging, it succesfully moved! Both motors are now able to reel the rope in and out to travel up and down the canvas at an arbitrarily set speed.
Next Steps Software: Make easier manual control mode for further testing Test controller algorithm, tune as necessary Attach and test painting mechanism</description></item><item><title>Web App Design</title><link>https://uwopus.github.io/blog/posts/webapp/</link><pubDate>Sun, 16 Jan 2022 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/webapp/</guid><description>The Opüs user-facing webapp was coded in pure HTML and CSS for desktop browser view only for now. It was coded in CodePen and each page can be viewed in the collection linked here: https://codepen.io/collection/zxBgew
Next Steps Host website on robot&amp;rsquo;s Raspberry Pi Link all pages together through communication with the robot Incorporate image processing algorithm</description></item><item><title>Main Board and Pico Communications</title><link>https://uwopus.github.io/blog/posts/spi1/</link><pubDate>Fri, 14 Jan 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/spi1/</guid><description>January 14th, 2022
This week we&amp;rsquo;ve been waiting for our Talon SRX Motor Controllers generously lended from Team 1325. While we wait for them to get here from Mississauga, we decided to get the Pico board in a position where we can plug in the motor controllers as soon as they arrive and begin turning them.
We chose SPI as the communication protocol between the Raspberry Pi Zero control computer and the Raspberry Pi Pico microcontroller because the UART port was left open as a slot for the IMU and I2C doesn&amp;rsquo;t work particularly well over longer cable runs because of the open-drain drivers.</description></item><item><title>Raspberry Pi Zero Bringup</title><link>https://uwopus.github.io/blog/posts/zero-bringup/</link><pubDate>Tue, 11 Jan 2022 20:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/zero-bringup/</guid><description>The Raspberry Pi Zero 2 is the main computer for the robot, and performs the path planning and high-level control for Opus. Although there is a previous post that outlines how to install CAN on a Pi Zero, it was determined that the CAN implementation would take much more time for insignificant returns. This post outlines how the initial setup was done on the Zero so that it is able to build programs for the Pico, program it, and development can start on the communication.</description></item><item><title>Bringing up CAN on a Pi Zero 2</title><link>https://uwopus.github.io/blog/posts/can-bringup/</link><pubDate>Fri, 17 Dec 2021 22:15:51 -0500</pubDate><guid>https://uwopus.github.io/blog/posts/can-bringup/</guid><description>The Problem Most guides online to enable CAN with SocketCAN on the Raspberry Pi, it is assumed that the MCP2515 is used. This chip is extremely popular, but because of the supply chain issues stemming from COVID-19, it is also very hard to find. When we ordered the components for Opus&amp;rsquo;s main board, we were lucky enough to find some MCP 2510 chips in stock on Digikey. Since the Linux driver is called mcp251x, we assumed that it would be pretty easy to setup!</description></item></channel></rss>